.dropdown.filter-menu
  %a.btn.btn-default{href: '#', data: {toggle: 'dropdown'}}
    = "#{I18n.t(:"filter.#{resource}.#{name}.title")}:"
    - current_value = I18n.t(:"filter.all")
    - values = params.fetch(name, nil)
    - if values.present?
      - current_value = []
      - filters.each do |filter|
        - if values.split(', ').include?(filter.slug)
          - current_value << I18n.t(:"filter.#{resource}.#{name}.#{filter.slug}", default: filter.name)
      - current_value = current_value.join(', ')
    = current_value
    %span.caret
  %ul.dropdown-menu{role: 'menu'}
    %li{class: ("active" unless params.fetch(name, '').present?)}
      - reset_params = params.dup
      - reset_params.delete(name)
      = link_to I18n.t(:"filter.all"), url_for(reset_params)
    - filters.each do |filter|
      - values = params.fetch(name, '').split(', ')
      - if filter.is_a?(Hash)
        - filter = OpenStruct.new filter
      %li{class: ("active" if values.include?(filter.slug))}
        - link = filter.link if defined?(filter.link)
        - link ||= I18n.t(:"filter.#{resource}.#{name}.#{filter.slug}", default: filter.name)
        - if values.include?(filter.slug)
          - value = values.delete(filter.slug)
        - else
          - value = [filter.slug]
          /- value = values << filter.slug
        = link_to link, plumb(name.to_s => values.join(', '))
